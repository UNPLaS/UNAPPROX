import org.antlr.v4.runtime.tree.TerminalNode;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;

public class approxvisitor<T> extends CBaseVisitor<T>{
    ArrayList<String> app_code= new ArrayList<String>();
    int[][] ForToPerf;
    String fileout;
    int forLoop_number=0;

    public void receive_data(int[][] perFor, String fileOut){
        this.ForToPerf = perFor;
        this.fileout=fileOut;
    }


    @Override
    public T visitTranslationUnit(CParser.TranslationUnitContext ctx) {
     //   ArrayList<String> app_code= new ArrayList<String>();
        app_code.add("/************************************\n");
        app_code.add("*****Code generated by UNAPPROX*****\n");
        app_code.add("************************************/\n");
        //Para includes y defines
        if(ctx.directives()!=null){
            Iterator<CParser.DirectivesContext> iter = ctx.directives().iterator();
            int i=0;
            while(iter.hasNext()){
                CParser.DirectivesContext str = iter.next();
                String direct = (String)visitDirectives(ctx.directives(i));
                app_code.add(direct);
                i++;
            }
        }
        app_code.add("\n");
        //esternalDeclaration(funciones, declaraciones)
        Iterator<CParser.ExternalDeclarationContext> iter = ctx.externalDeclaration().iterator();
        int i=0;
        while(iter.hasNext()){
            iter.next();
            visitExternalDeclaration(ctx.externalDeclaration(i));
           // app_code.add(direct+"\n");
            i++;
            //System.out.println(direct);
        }

        //Imprime el código de salida
        Path out = Paths.get(fileout);
        try {
            FileWriter writer = new FileWriter(fileout);
            for(String str: app_code) {
                writer.write(str);
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Iterator<String> Itercode = app_code.iterator();
        while(Itercode.hasNext()) System.out.print(Itercode.next());



        return null;
    }

    @Override
    public T visitDirectives(CParser.DirectivesContext ctx){
        if(ctx.IncludeDirective()!=null) return (T)ctx.IncludeDirective().getText();
        else return (T)ctx.ComplexDefine().getText();
    }

    //Declaraciones y funciones
    @Override
    public T visitExternalDeclaration(CParser.ExternalDeclarationContext ctx) {
        //System.out.println("extdec ok");
        if(ctx.functionDefinition()!=null) return visitFunctionDefinition(ctx.functionDefinition());
        else if(ctx.declaration()!=null) {
            visitDeclaration(ctx.declaration());

          //  app_code.add("; \n"); //Añade ; al final.
            return null;
        }
        else return (T)ctx.Semi().getText(); // ';' solo
       // return visitChildren(ctx);
    }

    @Override
    public T visitDeclaration(CParser.DeclarationContext ctx) {
        //System.out.println("Declaration ok  "+ ctx.getText());
        if(ctx.declarationSpecifiers()!=null){
            visitDeclarationSpecifiers(ctx.declarationSpecifiers());
            if(ctx.initDeclaratorList()!=null) {visitInitDeclaratorList(ctx.initDeclaratorList());}
           app_code.add("; \n"); //Añade ; al final.
        }
        else visitStaticAssertDeclaration(ctx.staticAssertDeclaration()); //¡Pendiente por definir!

        return null;
    }
//****************************P.e. int, unsigned, void, static, etc ***********************
    @Override
    public T visitDeclarationSpecifiers(CParser.DeclarationSpecifiersContext ctx) {
        Iterator<CParser.DeclarationSpecifierContext> iter = ctx.declarationSpecifier().iterator();
        int i=0;
        while(iter.hasNext()){
            visitDeclarationSpecifier(ctx.declarationSpecifier(i));
            iter.next();
            i++;
        }
        return null;
    }

    @Override
    public T visitDeclarationSpecifiers2(CParser.DeclarationSpecifiers2Context ctx) {
        Iterator<CParser.DeclarationSpecifierContext> iter = ctx.declarationSpecifier().iterator();
        int i=0;
        while(iter.hasNext()){
            visitDeclarationSpecifier(ctx.declarationSpecifier(i));
            iter.next();
            i++;
        }
        return null;
    }
    @Override
    public T visitDeclarationSpecifier(CParser.DeclarationSpecifierContext ctx) {
        visitChildren(ctx); //StorageSpec, typespec, typeQualif, functionSpec, aligmentSpec
        return null;
    }
    @Override
    public T visitStorageClassSpecifier(CParser.StorageClassSpecifierContext ctx) {
       // System.out.println(ctx.getText());
         app_code.add(ctx.getText());
        return null;
    }
    @Override
    public T visitTypeSpecifier(CParser.TypeSpecifierContext ctx) {
        if(ctx.atomicTypeSpecifier()!=null) visitAtomicTypeSpecifier(ctx.atomicTypeSpecifier()); //
        else if(ctx.structOrUnionSpecifier()!=null) visitStructOrUnionSpecifier(ctx.structOrUnionSpecifier());
        else if(ctx.enumSpecifier()!=null) visitEnumSpecifier(ctx.enumSpecifier());
        else if(ctx.typedefName()!=null) app_code.add(ctx.getText());
        else if(ctx.constantExpression()!=null){
            app_code.add("__typeof__ (");
            visitConstantExpression(ctx.constantExpression());
        }
        else if(ctx.typeSpecifier()!=null){
            visitTypeSpecifier(ctx.typeSpecifier());
            visitPointer(ctx.pointer());
        }
        else app_code.add(ctx.getText()+' ');
        return null;
    }
    @Override
    public T visitAtomicTypeSpecifier(CParser.AtomicTypeSpecifierContext ctx) {
        app_code.add("_Atomic(");
        visitTypeName(ctx.typeName()); //Por definir!!
        app_code.add(")");
        return null;
    }
    @Override
    public T visitInitDeclaratorList(CParser.InitDeclaratorListContext ctx) {
        visitInitDeclarator(ctx.initDeclarator(0));
        if(ctx.Comma()!=null) {
            Iterator<CParser.InitDeclaratorContext> iter = ctx.initDeclarator().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add(", ");
                visitInitDeclarator(ctx.initDeclarator(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitInitDeclarator(CParser.InitDeclaratorContext ctx) {
        visitDeclarator(ctx.declarator());

        if(ctx.initializer()!=null){
            app_code.add("=");
            visitInitializer(ctx.initializer());
        }
        return null;
    }
    @Override
    public T visitInitializer(CParser.InitializerContext ctx) {
        if(ctx.assignmentExpression()!=null) visitAssignmentExpression(ctx.assignmentExpression());
        else{
            app_code.add("{");
            visitInitializerList(ctx.initializerList());
            if(ctx.Comma()!=null) app_code.add(",");
            app_code.add("}");
        }
        return null;
    }
    @Override
    public T visitInitializerList(CParser.InitializerListContext ctx) {

        if(ctx.initializerList()!=null){
            visitInitializerList(ctx.initializerList());
            app_code.add(", ");
        }
        if(ctx.designation()!=null) {
            visitDesignation(ctx.designation());
        }
        visitInitializer(ctx.initializer());
        return null;
    }
    @Override
    public T visitTypedefName(CParser.TypedefNameContext ctx) {
        app_code.add(ctx.Identifier().getText());
        //System.out.println("probando:"+ctx.Identifier().getText());
        return null;
    }
//****************************************************************************************************************


    //Definición de funciones
    @Override
        public T visitFunctionDefinition(CParser.FunctionDefinitionContext ctx) {
      //  System.out.println("funct def ok"+ ctx.getText());
        if(ctx.declarationSpecifiers()!=null){
            visitDeclarationSpecifiers(ctx.declarationSpecifiers()); //void, char, etc
           // app_code.add("; \n");
        }
        visitDeclarator(ctx.declarator());
        if(ctx.declarationList()!=null){
            visitDeclarationList(ctx.declarationList());
        }
        visitCompoundStatement(ctx.compoundStatement());
        return null;
    }

    @Override
    public T visitDeclarator(CParser.DeclaratorContext ctx) {
        if(ctx.pointer()!=null) visitPointer(ctx.pointer());
        visitDirectDeclarator(ctx.directDeclarator());
        if(ctx.gccDeclaratorExtension()!=null){
            Iterator<CParser.GccDeclaratorExtensionContext> iter = ctx.gccDeclaratorExtension().iterator();
            int i=0;
            while(iter.hasNext()){
                visitGccDeclaratorExtension(ctx.gccDeclaratorExtension(i));
                iter.next();
                i++;
            }
        }
        return null;
    }


    @Override
    public T visitDirectDeclarator(CParser.DirectDeclaratorContext ctx) {
        if(ctx.Identifier()!=null){
            app_code.add(ctx.Identifier().getText());
            if(ctx.DigitSequence()!=null){
                app_code.add(":"+ctx.DigitSequence().getText());
            }
        }
        else if (ctx.declarator()!=null){
            app_code.add("(");
            visitDeclarator(ctx.declarator());
            app_code.add(")");
        }
        else if (ctx.directDeclarator()!=null){
            visitDirectDeclarator(ctx.directDeclarator());
            if(ctx.LeftParen()!=null){
                app_code.add("(");
                if (ctx.parameterTypeList()!=null)  visitParameterTypeList(ctx.parameterTypeList());
                else if (ctx.identifierList()!=null) visitIdentifierList(ctx.identifierList());
                app_code.add(")\n");
            }
            else if(ctx.LeftBracket()!=null){
                app_code.add("[");
                if (ctx.Star()!=null){
                    if(ctx.typeQualifierList()!=null) visitTypeQualifierList(ctx.typeQualifierList());
                    app_code.add("*]");
                }
                else if (ctx.Static()!=null){  //Falta la regla: 'static' typeQualifierList? assignmentExpression
                    visitTypeQualifierList(ctx.typeQualifierList());
                    app_code.add(" static ");
                    visitAssignmentExpression(ctx.assignmentExpression());
                }
                else {
                    if(ctx.typeQualifierList()!=null) visitTypeQualifierList(ctx.typeQualifierList());
                    if(ctx.assignmentExpression()!=null) visitAssignmentExpression(ctx.assignmentExpression());
                }
                app_code.add("]\n");
            }
        }
        else {
            app_code.add("(");
            if(ctx.typeSpecifier()!=null) visitTypeSpecifier(ctx.typeSpecifier());
            visitPointer(ctx.pointer());
            visitDirectDeclarator(ctx.directDeclarator());
            app_code.add(")\n");
        }
        return null;
    }

    @Override
    public T visitParameterTypeList(CParser.ParameterTypeListContext ctx) {
        visitParameterList(ctx.parameterList());
        if(ctx.Comma()!=null) app_code.add(",");
        if(ctx.Ellipsis()!=null) app_code.add("...");
        return null;
    }

    @Override public T visitParameterList(CParser.ParameterListContext ctx) {
        visitParameterDeclaration(ctx.parameterDeclaration(0));
        if(ctx.Comma()!=null){
            Iterator<CParser.ParameterDeclarationContext> iter = ctx.parameterDeclaration().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add(", ");
                visitParameterDeclaration(ctx.parameterDeclaration(i));
                iter.next();
                i++;
            }
        }
        return null;
    }

    @Override
    public T visitParameterDeclaration(CParser.ParameterDeclarationContext ctx) {
        if(ctx.declarator()!=null){
            visitDeclarationSpecifiers(ctx.declarationSpecifiers());
            visitDeclarator(ctx.declarator());
        }
        else{
            visitDeclarationSpecifiers2(ctx.declarationSpecifiers2());
            if(ctx.abstractDeclarator()!=null) visitAbstractDeclarator(ctx.abstractDeclarator());
        }
        return null;
    }

    @Override
    public T visitDeclarationList(CParser.DeclarationListContext ctx) {
        Iterator<CParser.DeclarationContext> iter = ctx.declaration().iterator();
        int i=0;
        while(iter.hasNext()){
            visitDeclaration(ctx.declaration(i));
            iter.next();
            i++;
        }
        return null;
    }
    @Override
    public T visitCompoundStatement(CParser.CompoundStatementContext ctx) {

        app_code.add("{\n");
        if(ctx.blockItemList()!=null) visitBlockItemList(ctx.blockItemList());
        app_code.add("}\n");
        return null;
    }
    @Override public T visitBlockItemList(CParser.BlockItemListContext ctx) {

        Iterator<CParser.BlockItemContext> iter = ctx.blockItem().iterator();
        int i=0;
        while(iter.hasNext()){
            visitBlockItem(ctx.blockItem(i));
            iter.next();
            i++;
        }
        return null;
    }

    @Override public T visitBlockItem(CParser.BlockItemContext ctx) {

        if(ctx.statement()!=null) visitStatement(ctx.statement());
        else visitDeclaration(ctx.declaration());

        return null;
    }
    @Override
    public T visitStatement(CParser.StatementContext ctx) {
        if(ctx.labeledStatement()!=null) visitLabeledStatement(ctx.labeledStatement());
        else if(ctx.compoundStatement()!=null) visitCompoundStatement(ctx.compoundStatement());
        else if(ctx.expressionStatement()!=null) visitExpressionStatement(ctx.expressionStatement());
        else if(ctx.selectionStatement()!=null) visitSelectionStatement(ctx.selectionStatement());
        else if(ctx.iterationStatement()!=null) visitIterationStatement(ctx.iterationStatement());
        else if(ctx.jumpStatement()!=null) visitJumpStatement(ctx.jumpStatement());
        // else{            Falta regla __asm volatile ( etc....
            //app_code.add("__asm volatile (");
        //}
        return null;
    }
    @Override
    public T visitLabeledStatement(CParser.LabeledStatementContext ctx) {
        if(ctx.Identifier()!=null) app_code.add(ctx.Identifier().getText()+":");
        else if(ctx.constantExpression()!=null){
            app_code.add("case ");
            visitConstantExpression(ctx.constantExpression()); //¡Pendiente por definir!
            app_code.add(":");
        }
        else app_code.add("default:");
        visitStatement(ctx.statement());
        return null;
    }
    @Override
    public T visitExpressionStatement(CParser.ExpressionStatementContext ctx) {
        if(ctx.expression()!=null) visitExpression(ctx.expression());
        app_code.add(";\n");
        return null;
    }
    @Override
    public T visitExpression(CParser.ExpressionContext ctx) {
        visitAssignmentExpression(ctx.assignmentExpression(0));
        if(ctx.Comma()!=null){
            Iterator<CParser.AssignmentExpressionContext> iter = ctx.assignmentExpression().iterator();
            int i=1;
            iter.next();
            while(iter.hasNext()){
                app_code.add(", ");
                visitAssignmentExpression(ctx.assignmentExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitAssignmentExpression(CParser.AssignmentExpressionContext ctx) {
        if(ctx.conditionalExpression()!=null) visitConditionalExpression(ctx.conditionalExpression());
        else if(ctx.unaryExpression()!=null){
            visitUnaryExpression(ctx.unaryExpression());
            visitAssignmentOperator(ctx.assignmentOperator());
            visitAssignmentExpression(ctx.assignmentExpression());
        }
        else app_code.add(ctx.DigitSequence().getText());
        return null;
    }
    @Override
    public T visitAssignmentOperator(CParser.AssignmentOperatorContext ctx) {
        app_code.add(ctx.getText());
        return null;
    }
    @Override
    public T visitSelectionStatement(CParser.SelectionStatementContext ctx) {
        if(ctx.If()!=null){
            app_code.add("if (");
            visitExpression(ctx.expression());
            app_code.add(")\n");
            visitStatement(ctx.statement(0));
            if(ctx.Else()!=null){
                app_code.add("else\n");
                visitStatement(ctx.statement(1));
            }
        }
        else {
            app_code.add("switch (");
            visitExpression(ctx.expression());
            app_code.add("\n");
            visitStatement(ctx.statement(0));
        }
        return null;
    }
    @Override
    public T visitIterationStatement(CParser.IterationStatementContext ctx) {

        if(ctx.Do()!=null){
            app_code.add("do \n");
            visitStatement(ctx.statement());
            app_code.add("\n while (");
            visitExpression(ctx.expression());
            app_code.add(" );\n");
        }
        else if(ctx.While()!=null){
            app_code.add("while (");
            visitExpression(ctx.expression());
            app_code.add(")\n");
            visitStatement(ctx.statement());
        }
        else {     //Ciclo for
            app_code.add("for (");
            visitForCondition(ctx.forCondition());
            app_code.add(")");
            if(ForToPerf[forLoop_number-1][0]!=0){
                app_code.add("  /* <----------------For-loop " );
                app_code.add(String.valueOf(forLoop_number-1));
                app_code.add(" perfored! */");
            }

            app_code.add("\n");
            visitStatement(ctx.statement());
        }
        return null;
    }
    @Override
    public T visitForCondition(CParser.ForConditionContext ctx) {

        String iter_type, ini, relation, last_iter, varIter="i";
        if(ctx.forDeclaration()!=null){

            varIter = (ctx.forDeclaration().initDeclaratorList().initDeclarator(0).declarator().directDeclarator().getText());
            visitForDeclaration(ctx.forDeclaration());

            if(ForToPerf[forLoop_number][0]==1) {

                iter_type = (ctx.forDeclaration().declarationSpecifiers().declarationSpecifier(0).typeSpecifier().getText());
                ini = (ctx.forDeclaration().initDeclaratorList().initDeclarator(0).initializer().getText());
                app_code.add(", " + " forIterator"+forLoop_number+"=" + ini);
            }
        }
        else if(ctx.expression()!=null){
            varIter = (ctx.expression().assignmentExpression(0).unaryExpression().postfixExpression().primaryExpression().getText());
            if(ForToPerf[forLoop_number][0]==1){
                ini=(ctx.expression().assignmentExpression(0).assignmentExpression().conditionalExpression().logicalOrExpression().getText());
                app_code.add("int" + " forIterator"+forLoop_number+"=" + ini + ",");
            }
            visitExpression(ctx.expression());
        }


        app_code.add(";");
        if(ctx.forExpression()!=null){
            if(ForToPerf[forLoop_number][0]==1){
                relation="==";
                if(ctx.forExpression(0).assignmentExpression(0).conditionalExpression().logicalOrExpression().logicalAndExpression(0).inclusiveOrExpression(0).exclusiveOrExpression(0).andExpression(0).equalityExpression(0).relationalExpression(0).relationalOper(0).LessEqual()!=null) {
                    relation = "<=";
                }
                else if(ctx.forExpression(0).assignmentExpression(0).conditionalExpression().logicalOrExpression().logicalAndExpression(0).inclusiveOrExpression(0).exclusiveOrExpression(0).andExpression(0).equalityExpression(0).relationalExpression(0).relationalOper(0).Less()!=null) {
                    relation="<";
                }
                last_iter=(ctx.forExpression(0).assignmentExpression(0).conditionalExpression().logicalOrExpression().logicalAndExpression(0).inclusiveOrExpression(0).exclusiveOrExpression(0).andExpression(0).equalityExpression(0).relationalExpression(0).shiftExpression(1).getText());
                app_code.add("forIterator"+forLoop_number+relation+last_iter);

            }
            else        visitForExpression(ctx.forExpression(0));
        }
        app_code.add(";");
        if(ctx.forExpression(1)!=null) {
            if(ForToPerf[forLoop_number][0]==2){
                app_code.add(varIter + "="+varIter+"+"+ForToPerf[forLoop_number][1]);
            }else {

                visitForExpression(ctx.forExpression(1));
                if (ForToPerf[forLoop_number][0] == 1)
                    app_code.add(", forIterator" + forLoop_number + "=forIterator" + forLoop_number + "+" + ForToPerf[forLoop_number][1]);
            }
        }
        forLoop_number++;
        return null;
    }

    @Override
    public T visitForDeclaration(CParser.ForDeclarationContext ctx) {
        visitDeclarationSpecifiers(ctx.declarationSpecifiers());
        if(ctx.initDeclaratorList()!=null) visitInitDeclaratorList(ctx.initDeclaratorList()); //Falta
        return null;
    }
    @Override
    public T visitForExpression(CParser.ForExpressionContext ctx) {
        visitAssignmentExpression(ctx.assignmentExpression(0));
        if(ctx.Comma()!=null){
            Iterator<CParser.AssignmentExpressionContext> iter = ctx.assignmentExpression().iterator();
            int i=1;
            iter.next();
            while(iter.hasNext()){
                app_code.add(", "); //<--------------------------------------------------------
                visitAssignmentExpression(ctx.assignmentExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitJumpStatement(CParser.JumpStatementContext ctx) {
        if(ctx.Identifier()!=null) app_code.add("goto "+ctx.Identifier().getText());
        else if(ctx.Continue()!=null) app_code.add("continue ");
        else if(ctx.Break()!=null) app_code.add("break ");
        else if(ctx.unaryExpression()!=null){
            app_code.add("goto ");
            visitUnaryExpression(ctx.unaryExpression());        //Por definir!
        }
        else{
            app_code.add("return ");
            if(ctx.expression()!=null) visitExpression(ctx.expression());
        }
        app_code.add(";\n");
        return null;
    }
    @Override
    public T visitConditionalExpression(CParser.ConditionalExpressionContext ctx) {
        visitLogicalOrExpression(ctx.logicalOrExpression());
        if(ctx.expression()!=null){
            app_code.add(" ? ");
            visitExpression(ctx.expression());
            app_code.add(":");
            visitConditionalExpression(ctx.conditionalExpression());
        }
        return null;
    }
    @Override
    public T visitLogicalOrExpression(CParser.LogicalOrExpressionContext ctx) {
        visitLogicalAndExpression(ctx.logicalAndExpression(0));
        if(ctx.OrOr()!=null){
            Iterator<CParser.LogicalAndExpressionContext> iter = ctx.logicalAndExpression().iterator();
            int i=1;
            iter.next();
            while(iter.hasNext()){
                app_code.add("||");
                visitLogicalAndExpression(ctx.logicalAndExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitLogicalAndExpression(CParser.LogicalAndExpressionContext ctx) {
        visitInclusiveOrExpression(ctx.inclusiveOrExpression(0));
        if(ctx.AndAnd()!=null){
            Iterator<CParser.InclusiveOrExpressionContext> iter = ctx.inclusiveOrExpression().iterator();
            int i=1;
            iter.next();
            while(iter.hasNext()){
                app_code.add("&&");
                visitInclusiveOrExpression(ctx.inclusiveOrExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitInclusiveOrExpression(CParser.InclusiveOrExpressionContext ctx) {
        visitExclusiveOrExpression(ctx.exclusiveOrExpression(0));
        if(ctx.Or()!=null){
            Iterator<CParser.ExclusiveOrExpressionContext> iter = ctx.exclusiveOrExpression().iterator();
            int i=1;
            iter.next();
            while(iter.hasNext()){
                app_code.add("|");
                visitExclusiveOrExpression(ctx.exclusiveOrExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override public T visitExclusiveOrExpression(CParser.ExclusiveOrExpressionContext ctx) {
        visitAndExpression(ctx.andExpression(0));
        if(ctx.Caret()!=null) {
            Iterator<CParser.AndExpressionContext> iter = ctx.andExpression().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add("^");
                visitAndExpression(ctx.andExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitAndExpression(CParser.AndExpressionContext ctx) {
        visitEqualityExpression(ctx.equalityExpression(0));
        if(ctx.And()!=null) {
            Iterator<CParser.EqualityExpressionContext> iter = ctx.equalityExpression().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add("&");
                visitEqualityExpression(ctx.equalityExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitEqualityExpression(CParser.EqualityExpressionContext ctx) {
            visitRelationalExpression(ctx.relationalExpression(0));
            if(ctx.equalRelation() !=null){
                Iterator<CParser.RelationalExpressionContext> iter = ctx.relationalExpression().iterator();
                int i = 1;
                iter.next();
                while (iter.hasNext()) {
                    app_code.add(ctx.equalRelation(i-1).getText());
                    visitRelationalExpression(ctx.relationalExpression(i));
                    iter.next();
                    i++;
                }
            }
        return null;
    }
    @Override public T visitRelationalExpression(CParser.RelationalExpressionContext ctx) {
        visitShiftExpression(ctx.shiftExpression(0));
        if(ctx.relationalOper()!=null){
            Iterator<CParser.ShiftExpressionContext> iter = ctx.shiftExpression().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add(ctx.relationalOper(i-1).getText());
                visitShiftExpression(ctx.shiftExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitShiftExpression(CParser.ShiftExpressionContext ctx) {
        visitAdditiveExpression(ctx.additiveExpression(0));
        if(ctx.LeftShift()!=null || ctx.RightShift()!=null){
            Iterator<CParser.AdditiveExpressionContext> iter = ctx.additiveExpression().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                if(ctx.LeftShift()!=null) app_code.add("<<");
                else app_code.add(">>");
                visitAdditiveExpression(ctx.additiveExpression(i));
                iter.next();
                i++;
            }
        }
        return null;
    }
    @Override
    public T visitAdditiveExpression(CParser.AdditiveExpressionContext ctx) {
        visitMultiplicativeExpression(ctx.multiplicativeExpression(0));
        if(ctx.addOper()!=null){
            Iterator<CParser.MultiplicativeExpressionContext> iter = ctx.multiplicativeExpression().iterator();
            int i = 0;
            iter.next();
            while (iter.hasNext()) {
               // if(ctx.Plus()!=null) app_code.add("+");
               // else app_code.add("-");
                app_code.add(ctx.addOper(i).getText());
                visitMultiplicativeExpression(ctx.multiplicativeExpression(i+1));
                iter.next();
                i++;
            }
        }
        return null;
    }

    @Override
    public T visitMultiplicativeExpression(CParser.MultiplicativeExpressionContext ctx) {
          //  System.out.println("Prueba:"+ctx.getText());
        visitCastExpression(ctx.castExpression(0));
        if(ctx.multOper()!=null){
            Iterator<CParser.CastExpressionContext> iter = ctx.castExpression().iterator();
            int i = 0;
            iter.next();
            while (iter.hasNext()) {
         /*       if(ctx.Star(i)!=null) {
                    app_code.add("*");
                    System.out.println("Un *!");
                }
                else if(ctx.Div(i)!=null) app_code.add("/");
                else app_code.add("%");*/
                app_code.add(ctx.multOper(i).getText());
                visitCastExpression(ctx.castExpression(i+1));
                iter.next();
                i++;
            }
        }
        return null;
    }


    @Override
    public T visitCastExpression(CParser.CastExpressionContext ctx) {
        if(ctx.unaryExpression()!=null) visitUnaryExpression(ctx.unaryExpression());
        else if(ctx.DigitSequence()!=null) app_code.add(ctx.DigitSequence().getText());
        else{
            if(ctx.getStart().getText().equals("__extension__")) app_code.add("__extension__");
            app_code.add("( ");
            visitTypeName(ctx.typeName());
            app_code.add(" )");
            visitCastExpression(ctx.castExpression());
        }
        return null;
    }
    @Override
    public T visitUnaryExpression(CParser.UnaryExpressionContext ctx) {
        if(ctx.postfixExpression()!=null) visitPostfixExpression(ctx.postfixExpression());
        else if(ctx.PlusPlus()!=null){
            app_code.add("++");
            visitUnaryExpression(ctx.unaryExpression());
        }
        else if(ctx.MinusMinus()!=null){
            app_code.add("--");
            visitUnaryExpression(ctx.unaryExpression());
        }
        else if(ctx.unaryOperator()!=null){
            visitUnaryOperator(ctx.unaryOperator());
            visitCastExpression(ctx.castExpression());
        }
        else if(ctx.Sizeof()!=null){
            app_code.add("sizeof");
            if(ctx.unaryExpression()!=null) visitUnaryExpression(ctx.unaryExpression());
            else{
                app_code.add("(");
                visitTypeName(ctx.typeName());
                app_code.add(")");
            }
            visitUnaryOperator(ctx.unaryOperator());
            visitCastExpression(ctx.castExpression());
        }
        else if(ctx.Alignof()!=null){
            app_code.add("_Alignof");
            app_code.add("(");
            visitTypeName(ctx.typeName());
            app_code.add(")");
        }
        else{
            app_code.add("&&");
            app_code.add(ctx.Identifier().getText());
        }
        return null;
    }
    @Override
    public T visitUnaryOperator(CParser.UnaryOperatorContext ctx) {
        app_code.add(ctx.getText());
        return null;
    }
    @Override
    public T visitTypeName(CParser.TypeNameContext ctx) {
        visitSpecifierQualifierList(ctx.specifierQualifierList());
        if(ctx.abstractDeclarator()!=null) visitAbstractDeclarator(ctx.abstractDeclarator());
        return null;
    }
    @Override
    public T visitSpecifierQualifierList(CParser.SpecifierQualifierListContext ctx) {
        if(ctx.typeSpecifier()!=null) visitTypeSpecifier(ctx.typeSpecifier());
        else visitTypeQualifier(ctx.typeQualifier());
        if(ctx.specifierQualifierList()!=null) visitSpecifierQualifierList(ctx.specifierQualifierList());
        return null;
    }
    @Override
    public T visitTypeQualifier(CParser.TypeQualifierContext ctx) {
        app_code.add(ctx.getText()+ " ");
        return null;
    }
    @Override
    public T visitAbstractDeclarator(CParser.AbstractDeclaratorContext ctx) {
        if(ctx.directAbstractDeclarator()!=null){
            if(ctx.pointer()!=null) visitPointer(ctx.pointer());
            visitDirectAbstractDeclarator(ctx.directAbstractDeclarator());
            if(ctx.gccDeclaratorExtension()!=null) {
                Iterator<CParser.GccDeclaratorExtensionContext> iter = ctx.gccDeclaratorExtension().iterator();
                int i = 0;
                while (iter.hasNext()) {
                    visitGccDeclaratorExtension(ctx.gccDeclaratorExtension(i));
                    iter.next();
                    i++;
                }
            }
        }
        return null;
    }
    @Override
    public T visitPointer(CParser.PointerContext ctx) {      //********Incompleta******
        if(ctx.Star()!=null){
            app_code.add("*");
            if(ctx.typeQualifierList()!=null) visitTypeQualifierList(ctx.typeQualifierList());
            if(ctx.pointer()!=null) visitPointer(ctx.pointer());
        }
        else{
            app_code.add("^");
            if(ctx.typeQualifierList()!=null) visitTypeQualifierList(ctx.typeQualifierList());
            if(ctx.pointer()!=null) visitPointer(ctx.pointer());
        }
        if(ctx.typeQualifierList()!=null) visitTypeQualifierList(ctx.typeQualifierList());
        return null;
    }
    @Override
    public T visitTypeQualifierList(CParser.TypeQualifierListContext ctx) {
        Iterator<CParser.TypeQualifierContext> iter = ctx.typeQualifier().iterator();
        int i = 0;
        while (iter.hasNext()) {
            visitTypeQualifier(ctx.typeQualifier(i));
            iter.next();
            i++;
        }
        return null;
    }

    @Override public T visitDirectAbstractDeclarator(CParser.DirectAbstractDeclaratorContext ctx) { return null; }
    @Override public T visitGccDeclaratorExtension(CParser.GccDeclaratorExtensionContext ctx) { return null; }


    @Override
    public T visitPostfixExpression(CParser.PostfixExpressionContext ctx) {
        if(ctx.primaryExpression()!=null) visitPrimaryExpression(ctx.primaryExpression());
        else if (ctx.postfixExpression()!=null){
            visitPostfixExpression(ctx.postfixExpression());
            if(ctx.expression()!=null){
                app_code.add("[");
                visitExpression(ctx.expression());
                app_code.add("]");
            }
            else if(ctx.LeftParen()!=null){
                app_code.add("(");
                if(ctx.argumentExpressionList()!=null) visitArgumentExpressionList(ctx.argumentExpressionList());
                app_code.add(")");
            }
            else if(ctx.Dot()!=null){
                app_code.add(".");
                app_code.add(ctx.Identifier().getText());
            }
            else if(ctx.Arrow()!=null){
                app_code.add("->");
                app_code.add(ctx.Identifier().getText());
            }
            else if(ctx.PlusPlus()!=null) app_code.add("++");
            else if(ctx.MinusMinus()!=null) app_code.add("--");


        }
        else if(ctx.getStart().getText().equals("__extension__")) {
            app_code.add("__extension__");
            app_code.add("(");
            visitTypeName(ctx.typeName());
            app_code.add("){");
            visitInitializerList(ctx.initializerList());
            if (ctx.Comma() != null) app_code.add(",");
            app_code.add("}");
        }
        else{
            app_code.add("(");
            visitTypeName(ctx.typeName());
            app_code.add("){");
            visitInitializerList(ctx.initializerList());
            if (ctx.Comma() != null) app_code.add(",");
            app_code.add("}");
        }

        return null;
    }

    @Override
    public T visitArgumentExpressionList(CParser.ArgumentExpressionListContext ctx) {
        visitAssignmentExpression(ctx.assignmentExpression(0));
        if(ctx.assignmentExpression(1)!=null){
            Iterator<CParser.AssignmentExpressionContext> iter = ctx.assignmentExpression().iterator();
            int i = 1;
            iter.next();
            while (iter.hasNext()) {
                app_code.add(",");
                visitAssignmentExpression(ctx.assignmentExpression(i));
                i++;
                iter.next();
            }
        }
        return null;
    }

    @Override
    public T visitPrimaryExpression(CParser.PrimaryExpressionContext ctx) { //*****Revisar!!!!

        if(ctx.Identifier()!=null) app_code.add(ctx.Identifier().getText());
        else if(ctx.Constant()!=null) app_code.add(ctx.Constant().getText());
        else if(ctx.getStart().getText().equals("(")){
            app_code.add("(");
            visitExpression(ctx.expression());
            app_code.add(")");
        }
        else if(ctx.StringLiteral()!=null){
           // app_code.add(ctx.getStart().getText());
            Iterator<TerminalNode> iter = ctx.StringLiteral().iterator();
            int i=0;
            while(iter.hasNext()){
                app_code.add(ctx.StringLiteral(i).getText());
                iter.next();
                i++;
            }
        }
        else if(ctx.genericSelection()!=null) visitGenericSelection(ctx.genericSelection());
        else if(ctx.compoundStatement()!=null){
            if(ctx.getStart().getText().equals("__extension__")) app_code.add("__extension__");
            app_code.add("(");
            visitCompoundStatement(ctx.compoundStatement());
            app_code.add(")");
        }
        else if(ctx.getStart().getText().equals("__builtin_va_arg")){
            app_code.add("__builtin_va_arg(");
            visitUnaryExpression(ctx.unaryExpression());
            app_code.add(",");
            visitTypeName(ctx.typeName());
            app_code.add(")");
        }
        else{
            app_code.add("__builtin_offsetof(");
            visitTypeName(ctx.typeName());
            app_code.add(",");
            visitUnaryExpression(ctx.unaryExpression());
            app_code.add(")");
        }
        return null;
    }
}

